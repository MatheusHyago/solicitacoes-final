package com.testelemontech.solicitacoes.config;

import com.testelemontech.solicitacoes.model.ModelRequest;
import com.testelemontech.solicitacoes.wsdl.PesquisarSolicitacaoRequest;
import com.testelemontech.solicitacoes.wsdl.PesquisarSolicitacaoResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.ws.client.core.WebServiceTemplate;
import org.springframework.ws.client.core.WebServiceMessageCallback;
import org.springframework.ws.soap.SoapMessage;
import org.springframework.ws.soap.SoapHeader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.xml.namespace.QName;
import java.io.ByteArrayOutputStream;
import java.nio.charset.StandardCharsets;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class WsClient {

    private static final Logger logger = LoggerFactory.getLogger(WsClient.class);
    private final WebServiceTemplate webServiceTemplate;

    // URL do servi√ßo SOAP definida no application.properties
    @Value("${soap.wsdlUrl}")
    private String wsdlUrl;

    // Dados de autentica√ß√£o ‚Äì devem corresponder aos usados com sucesso no SoapUI
    @Value("${soap.keyClient}")
    private String keyClient;

    @Value("${soap.username}")
    private String username;

    @Value("${soap.password}")
    private String password;

    public WsClient(WebServiceTemplate webServiceTemplate) {
        this.webServiceTemplate = webServiceTemplate;
    }

    /**
     * Faz a requisi√ß√£o SOAP para buscar as solicita√ß√µes.
     *
     * @param request Objeto PesquisarSolicitacaoRequest com os filtros da solicita√ß√£o.
     * @return Lista de ModelRequest convertida da resposta SOAP.
     */
    public List<ModelRequest> buscarProdutosAereos(PesquisarSolicitacaoRequest request) {
        try {
            logger.info("üìÑ Iniciando requisi√ß√£o SOAP para {}", wsdlUrl);

            // N√£o √© necess√°rio adicionar keyClient no Body, pois ele deve estar apenas no Header

            // Callback para adicionar os cabe√ßalhos SOAP
            WebServiceMessageCallback callback = message -> {
                SoapMessage soapMessage = (SoapMessage) message;
                SoapHeader soapHeader = soapMessage.getSoapHeader();

                // Utilize o namespace conforme o SoapUI
                String namespace = "http://lemontech.com.br/selfbooking/wsselfbooking/services";

                // Se o servi√ßo espera "username" (tudo min√∫sculo) ou "userName" pode ser ajustado aqui.
                // Conforme o exemplo do SoapUI, usamos "userName".
                soapHeader.addHeaderElement(new QName(namespace, "keyClient")).setText(keyClient);
                soapHeader.addHeaderElement(new QName(namespace, "userName")).setText(username);
                soapHeader.addHeaderElement(new QName(namespace, "userPassword")).setText(password);

                logger.info("üîë Cabe√ßalhos SOAP adicionados: keyClient={}, userName={}, userPassword=********", keyClient, username);

                // Log da mensagem SOAP enviada
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                soapMessage.writeTo(out);
                logger.debug("üì§ SOAP Request Enviada: \n{}", out.toString(StandardCharsets.UTF_8));

                // Se desejar, voc√™ pode verificar se h√° um Fault no body (embora normalmente seja retornado na resposta)
                if (soapMessage.getSoapBody().hasFault()) {
                    logger.error("‚ùå SOAP Fault: {}", soapMessage.getSoapBody().getFault().getFaultStringOrReason());
                }
            };

            // Envia a requisi√ß√£o SOAP
            PesquisarSolicitacaoResponse response = (PesquisarSolicitacaoResponse)
                    webServiceTemplate.marshalSendAndReceive(wsdlUrl, request, callback);

            logger.info("‚úÖ Resposta SOAP recebida com sucesso!");

            if (response.getSolicitacao() == null || response.getSolicitacao().isEmpty()) {
                logger.warn("‚ö†Ô∏è Nenhuma solicita√ß√£o encontrada!");
                return List.of();
            }

            return converterParaModelRequest(response);

        } catch (Exception e) {
            logger.error("‚ùå Erro ao buscar produtos a√©reos via SOAP: {}", e.getMessage(), e);
            throw new RuntimeException("Erro ao integrar com o servi√ßo SOAP", e);
        }
    }

    /**
     * Converte a resposta SOAP em uma lista de ModelRequest.
     *
     * @param response Resposta SOAP do servi√ßo.
     * @return Lista de ModelRequest.
     */
    private List<ModelRequest> converterParaModelRequest(PesquisarSolicitacaoResponse response) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss");

        return response.getSolicitacao()
                .stream()
                .map(solicitacao -> {
                    ModelRequest model = new ModelRequest();

                    if (solicitacao.getPassageiros() != null &&
                            !solicitacao.getPassageiros().getPassageiro().isEmpty()) {
                        model.setNomePassageiro(
                                solicitacao.getPassageiros().getPassageiro().get(0).getNome());
                    }

                    if (solicitacao.getAereos() != null &&
                            !solicitacao.getAereos().getAereo().isEmpty() &&
                            !solicitacao.getAereos().getAereo().get(0).getAereoSeguimento().isEmpty()) {
                        model.setCidadeOrigem(
                                solicitacao.getAereos().getAereo().get(0).getAereoSeguimento().get(0).getOrigem());
                        try {
                            if (solicitacao.getAereos().getAereo().get(0)
                                    .getAereoSeguimento().get(0).getDataSaida() != null) {
                                model.setDataHoraSaida(solicitacao.getAereos().getAereo().get(0)
                                        .getAereoSeguimento().get(0).getDataSaida()
                                        .toGregorianCalendar().toZonedDateTime().toLocalDateTime());
                            }
                        } catch (Exception e) {
                            logger.warn("‚ö†Ô∏è Erro ao converter data de sa√≠da para a solicita√ß√£o '{}': {}",
                                    solicitacao.getPassageiros().getPassageiro().get(0).getNome(), e.getMessage());
                            model.setDataHoraSaida(null);
                        }
                    }

                    model.setCiaAerea(solicitacao.getCodigoCliente());
                    model.setCidadeDestino(solicitacao.getCodigoUnidadeNegocio());

                    logger.info("üìå Solicita√ß√£o convertida: {}", model);
                    return model;
                })
                .collect(Collectors.toList());
    }
}
